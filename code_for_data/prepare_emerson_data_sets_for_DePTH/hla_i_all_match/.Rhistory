install.packages("devtools")
library("devtools")
install_github("Sun-lab/ideas")
library(ideas)
install.packages("remoter", dependencies=TRUE)
remoter::server(showmsg=TRUE)
remoter::server(showmsg=TRUE)
remoter::server()
install.packages("svd")
install.packages("qvalue")
install.packages("fgsea")
library(qvalue)
install.packages("qvalue")
BiocManager::install("qvalue")
BiocManager::install("fgsea")
install.packages("ggcorrplot")
browseVignettes("goseq")
install.packages('Cairo')
library(Cario)
library(Cairo)
setwd("/Volumes/fh/scratch")
setwd("/Volumes/fh/fast/till_b/study_x/10x_2021-11-02/step4.7")
gc()
library(data.table)
library(ggplot2)
library(ggpubr)
library(ggpointdensity)
theme_set(theme_classic())
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
work_dir   = "/Volumes/fh/fast/till_b/study_x/10x_2021-11-02/step4.7"
filename   = "step4.7_stacked_strange_Tcells_doublets.csv"
filepath   = file.path(work_dir, filename)
df= read.csv(filepath, header = TRUE)
df$type = str_extract(df$sample, "(?<=_)\\S+")
df$patient = str_extract(df$sample, "(\\d+-X\\d+)(?=_)")
table(df$type)
df$type[grep("peak", df$type)] = "peak"
table(df$type)
df$sample = as.factor(df$sample)
df$patient = as.factor(df$patient)
df$type = as.factor(df$type)
df$prop_GEX_rm_all_process =
(df$ncells_start - df$ncells_after_doublet)/df$ncells_start
summary(df)
ggplot(df, aes(x=ncells_start,
y=prop_GEX_rm_all_process ,
col=patient, shape=type)) + geom_point(size=2.5)
ggplot(df, aes(x=ncells_start,
y=ncells_after_mito,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="total number of GEX cells before filtering",
y="number of GEX cells left after filtering by mitochondria")
ggplot(df, aes(x=ncells_start,
y=ncells_after_mito_additional,
col=patient, shape=type)) + geom_point(size=2.5)
ggplot(df, aes(x=ncells_start,
y=ncells_after_doublet,
col=patient, shape=type)) + geom_point(size=2.5)
ggplot(df, aes(x=ncells_start,
y=prop_GEX_rm_as_doublets,
col=patient, shape=type)) + geom_point(size=2.5)
ggplot(df, aes(x=ncells_start,
y=prop_GEX_rm_all_process ,
col=patient, shape=type)) + geom_point(size=2.5)
ggplot(df, aes(x=ncells_start,
y=ncells_after_mito,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="total number of GEX cells before filtering",
y="number of GEX cells left after filtering by mitochondria")
ggplot(df, aes(x=ncells_start,
y=ncells_after_mito,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="# of GEX cells left after filtering by mitochondria")
ggplot(df, aes(x=ncells_start,
y=ncells_after_mito_additional,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="# of GEX cells left after filtering by step(2)")
ggplot(df, aes(x=ncells_start,
y=ncells_after_doublet,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="# of GEX cells left after doublets removal")
ggplot(df, aes(x=ncells_start,
y=prop_GEX_rm_as_doublets,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="proportion of GEX cells removed at doublets step")
ggplot(df, aes(x=ncells_start,
y=prop_GEX_rm_all_process ,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="proportion of GEX cells removed in entire process")
ggplot(df, aes(x=ncells_start,
y=n_vdj_cells,
col=patient, shape=type)) + geom_point(size=2.5) +
labs(x="# of GEX cells before filtering",
y="# of VDJ cells before filtering")
ggplot(df, aes(x=prop_GEX_rm_as_doublets,
y=prop_vdj_cells_rm_as_doublet,
col=patient, shape=type)) + geom_point(size=2.5) +
geom_abline(slope = 1, intercept = 0) +
labs(x="proportion of GEX cells removed at doublet step",
y="proportion of VDJ cells removed at doublet step")
gc()
library(ggplot2)
library(dplyr)
library("readxl")
dir_Su = "~/Documents/Fred_Hutch/COVID_data/data/Su_2020_data"
data <- read.table(file.path(dir_Su, "E-MTAB-9357.sdrf.txt"),sep="\t",header=T)
dim(data)
summary(data)
data[1:2, ]
table(data$Characteristics.sampling.time.point., useNA = "ifany")
table(data$Characteristics.organism.part., useNA = "ifany")
length(unique(data$Characteristics.individual.))
length(unique(data$Characteristics.disease.))
table(data$Characteristics.disease., useNA = "ifany")
length(unique(data$Material.Type))
table(data$Material.Type, useNA = "ifany")
length(unique(data$Extract.Name))
table(data$Comment.LIBRARY_LAYOUT., useNA = "ifany")
table(data$Comment.LIBRARY_SELECTION., useNA = "ifany")
table(data$Comment.LIBRARY_SOURCE., useNA = "ifany")
table(data$Comment.LIBRARY_STRATEGY., useNA = "ifany")
table(data$Factor.Value.disease., useNA = "ifany")
table(data$Factor.Value.sampling.time.point., useNA = "ifany")
data$Characteristics.individual.
data$Extract.Name
data$Assay.Name
table(data$Extract.Name == data$Assay.Name, useNA = "ifany")
data[16:20, ]
meta_filepath =
file.path(dir_Su, "ScienceDirect_files_03Mar2022_19-15-09/1-s2.0-S0092867420314446-mmc1.xlsx")
df_meta = as.data.frame(read_excel(meta_filepath, sheet = 2))
df_meta[1:2, ]
length(unique(df_meta$`Study Subject ID`))
length(unique(df_meta$`Sample ID`))
table(df_meta$`Blood draw time point`)
# WOS score
table(df_meta$`Who Ordinal Scale`, useNA = "ifany")
get_label <-function(wos){
if (wos %in% c("1", "1 or 2", "2")){
return("mld")
}else if(wos %in% c("3", "4")){
return("moderate")
}else if(wos %in% c("5", "6", "7")){
return("severe")
}else{
return(NA)
}
}
label_v = c()
for (wos in df_meta$`Who Ordinal Scale`){
label_v = c(label_v, get_label(wos))
}
df_meta[is.na(df_meta$`Who Ordinal Scale`),]
df_meta[df_meta$`Study Subject ID` == "INCOV129",]
df_meta$label = label_v
df_meta[1:20, c("`Who Ordinal Scale`", "label")]
df_meta[1:20, c(`Who Ordinal Scale`, "label")]
df_meta[1:20.,]
count_label_tibble = df_meta %>% group_by(`Study Subject ID`) %>%
summarise(n = n(),
n_sample_ID = length(unique(`Sample ID`)),
n_age = length(unique(Age)),
n_sex = length(unique(Sex)),
n_label = length(unique(label)))
table(count_label_tibble$n_age, useNA = "ifany")
table(count_label_tibble$n_sex, useNA = "ifany")
table(count_label_tibble$n_label, useNA = "ifany")
# 'INCOV129' has two different labels for the two samples because T2 has no WOS
count_label_tibble[count_label_tibble$`Study Subject ID` == 'INCOV129',]
dim(df_meta)
df_meta$`Sample ID`
dim(data)
data$Source.Name
nrow(data) - 16
count_label_tibble$`Study Subject ID`[count_label_tibble$n_sample_ID == 1]
139* 2 - 13
dim(df_meta)
healthy_flag = rep(FALSE, nrow(data))
for (i in 1:nrow(data)){
if (substr(data$Source.Name[i], 1, 7) == "Healthy"){
healthy_flag[i] = TRUE
}
}
table(healthy_flag)
data_covid = data[!healthy_flag, ]
dim(data_covid)
table(data_covid$Characteristics.individual., useNA = "ifany")
length(unique(data_covid$Characteristics.individual.))
table(data_covid$Factor.Value.sampling.time.point., useNA = "ifany")
unique_data_covid_individuals = unique(data_covid$Characteristics.individual.)
length(unique_data_covid_individuals)
table(unique_data_covid_individuals %in% df_meta$`Study Subject ID`, useNA = "ifany")
data_covid$Source.Name
data_covid$Characteristics.individual.
split_names =
unlist(strsplit(data_covid$Source.Name, "-"))[seq(1, 507, by = 2)]
split_time =
unlist(strsplit(data_covid$Source.Name, "-"))[seq(2, 508, by = 2)]
table(split_names == data_covid$Characteristics.individual., useNA = "ifany")
data_covid$Factor.Value.sampling.time.point.
table(split_time[1:170] == data_covid$Factor.Value.sampling.time.point.[1:170], useNA = "ifany")
table(data_covid$Source.Name[171:254] == data_covid$Factor.Value.sampling.time.point.[171:254], useNA = "ifany")
data_covid$time_BLAC = split_time
# check whether in df_meta,
# the sample ID column is a combination of Study Subject ID and the last
# character in blood draw time point
# TRUE
dim(df_meta)
ind_vec =
unlist(strsplit(df_meta$`Blood draw time point`, ""))[seq(2, 530, by = 2)]
ind_vec
df_meta$`Blood draw time point`
reconstruct_sampleID = paste(df_meta$`Study Subject ID`, ind_vec, sep = "-")
reconstruct_sampleID
table(reconstruct_sampleID == df_meta$`Sample ID`, useNA = "ifany")
covid_data[1:2, ]
data_covid[1:2, ]
temp_tibble = data_covid %>% group_by(Characteristics.individual) %>%
summarise(n = n())
data_covid[1:2, ]
temp_tibble = data_covid %>% group_by(Characteristics.individual.) %>%
summarise(n = n())
temp_tibble[temp_tibble$n == 1, ]
one_sample_only = temp_tibble$Characteristics.individual.[temp_tibble$n == 1, ]
one_sample_only = temp_tibble$Characteristics.individual.[temp_tibble$n == 1]
one_sample_only
data_covid[which(data_covid$Characteristics.individual. %in% one_sample_only),]
df_meta[1:2,]
df_meta[which(df_meta$`Study Subject ID` %in% one_sample_only),]
# -------------------------------------------------------------
# match the sample filename in data_covid with label in df_meta
# -------------------------------------------------------------
# create a column in data_covid with sample name and T1/T2
t_format_vec = rep(NA, nrow(data_covid))
length(t_format_vec)
t_format_vec[which(data_covid$time_BLAC == "BL")] = "T1"
table(t_format_vec, useNA = "ifany")
t_format_vec[which(data_covid$time_BLAC == "AC")] = "T2"
table(t_format_vec, useNA = "ifany")
df_meta[1:2, ]
df_meta[1:6, ]
onetwo_format_vec = rep(NA, nrow(data_covid))
onetwo_format_vec[which(data_covid$time_BLAC == "BL")] = "1"
onetwo_format_vec[which(data_covid$time_BLAC == "AC")] = "2"
table(onetwo_format_vec, useNA = "ifany")
data_covid$time_12 = onetwo_format_vec
data_covid[1:2, ]
df_meta[1:2, ]
data_covid$time_12 = onetwo_format_vec
data_covid$sampleID = paste(data_covid$Characteristics.individual.,
data_covid$time_12,
sep = "-")
data_covid$sampleID
table(data_covid$sampleID %in% df_meta$`Sample ID`, useNA = "ifany")
match_index = match(data_covid$sampleID, df_meta$`Sample ID`)
match_index
df_meta_matched = df_meta[match_index,]
dim(df_meta_matched)
table(data_covid$sampleID, df_meta_matched$`Sample ID`)
table(data_covid$sampleID == df_meta_matched$`Sample ID`, useNA = "ifany")
df_meta_matched$`Who Ordinal Scale`
df_meta_matched$label
data_covid$label = df_meta_matched$label
names(data_covid)
data_covid$Age = df_meta_matched$Age
names(data_covid)
data_covid_selected = data_covid[, c("sampleID", "time_BLAC")]
data_covid_selected
data_covid[1:2, ]
col2kp = c("Source.Name", "Characteristics.individual.",
"Derived.Array.Data.File.2", "Derived.Array.Data.File.3",
"sampleID", "time_BLAC", "time_12", "label", "Age")
data_covid_selected = data_covid[, col2kp]
dim(data_covid_selected)
data_covid_selected[1:2, ]
names(data_covid)
data_covid$label = df_meta_matched$label
data_covid$WOS = df_meta_matched$`Who Ordinal Scale`
data_covid$Age = df_meta_matched$Age
col2kp = c("Source.Name", "Characteristics.individual.",
"Derived.Array.Data.File.2", "Derived.Array.Data.File.3",
"sampleID", "time_BLAC", "time_12", "label", "Age")
data_covid_selected = data_covid[, col2kp]
names(data_covid_selected)
col2kp = c("Source.Name", "Characteristics.individual.",
"Derived.Array.Data.File.2", "Derived.Array.Data.File.3",
"sampleID", "time_BLAC", "time_12", "label", "WOS", "Age")
data_covid_selected = data_covid[, col2kp]
names(data_covid_selected)
table(data_covid_selected$WOS, useNA = "ifany")
# count subjects with two labels in this data frame with selected columns
data_covid_count_label_tibble =
data_covid_selected %>%
group_by(Characteristics.individual.) %>%
summarize(n = length(unique(label)))
data_covid_count_label_tibble
table(data_covid_count_label_tibble$n)
table(data_covid_selected$WOS, useNA = "ifany")
data_covid_selected[which(data_covid_selected$Characteristics.individual. == 'INCOV129'),]
write.csv(data_covid_selected,
file = file.path(dir_Su, "step54_data_covid_254_samples_meta.csv"),
row.names = FALSE)
dim(data_covid_selected)
154320 + 6809
154320 + 6809 + 1523
-
)
dir1 = "/Users/sliu/Documents/Fred_Hutch/COVID_data/ImmuneCODE-MIRA-Release002.1"
dir2 = "/Users/sliu/Downloads/ImmuneCODE-MIRA-Release002"
filepath1 = file.path(dir1, "subject-metadata.csv")
filepath2 = file.path(dir2, "subject-metadata.csv")
df_1 = read.csv(filepath1, header = TRUE)
df_2 = read.csv(filepath2, header = TRUE)
head(df_1)
head(df_2)
length(unique(df_1$Subject))
length(unique(df_2$Subject))
length(unique(df_1$Experiment))
length(unique(df_2$Experiment))
?roc
library(pROC)
?roc
dir = "/Volumes/fh/scratch/delete90/sun_w/si_liu/aTCR/DePTH/results/step26_scores_HLA_I_65_23"
dir
setwd(dir)
dir = "/Volumes/fh/scratch/delete90/sun_w/si_liu/aTCR/DePTH/"
dir = "/Volumes/fh/scratch/delete90/sun_w/si_liu/aTCR/DePTH"
setwd(dir)
setwd("/Volumes/fh/scratch/delete90/sun_w/si_liu/aTCR/DePTH")
6423 * 0.6
3854 * 5
1285 * 5
1284 * 5
setwd("~/Documents/Fred_Hutch/DePTH_folder/DePTH_formatted/data_script/hla_i_all_match")
hla_i = 1
public_allele_level_tcr_info =
read.csv(paste0(data_dir,
"step45_public_allele_level_tcr_filtered_wrt_vf_and_aa.csv"),
header = TRUE)
dim(public_allele_level_tcr_info)[1]
head(public_allele_level_tcr_info)
data_dir = "../../data/"
public_allele_level_tcr_info =
read.csv(paste0(data_dir,
"step45_public_allele_level_tcr_filtered_wrt_vf_and_aa.csv"),
header = TRUE)
dim(public_allele_level_tcr_info)[1]
head(public_allele_level_tcr_info)
dim(public_allele_level_tcr_info)[1]
HLA_v2_features =
read.csv(paste0(data_dir, "HLA_v2_features_reformat.csv"), header = TRUE)
dim(HLA_v2_features)
hla_short = rep(NA, dim(HLA_v2_features)[1])
for (i in 1:dim(HLA_v2_features)[1]){
hla_short[i] = substr(HLA_v2_features$hla[i], 1, 5)
}
HLA_v2_features$hla_short = hla_short
HLA_I_v2_features =
HLA_v2_features[HLA_v2_features$hla_short %in% c("HLA-A", "HLA-B", "HLA-C"),]
dim(HLA_I_v2_features)
full_set = paste(c(0:665))
full_set
hla_p_set = strsplit(HLA_I_v2_features$ind_pos[hla_i], ",")[[1]]
hla_n_set = strsplit(HLA_I_v2_features$ind_neg[hla_i], ",")[[1]]
hla_p_set
length(hla_p_set)
hla_n_set = strsplit(HLA_I_v2_features$ind_neg[hla_i], ",")[[1]]
library(rmarkdown)
# this line is for generating png on linux platform
# options(bitmapType='cairo')
# knitr::opts_chunk$set(echo = TRUE, dpi = 600, dev = "png")
# Sys.setenv("DISPLAY"=":0.0")
# .libPaths("/fh/scratch/delete90/sun_w/si_liu/R_4.1.0/R-4.1.0/library")
bio_packs = c("SingleCellExperiment", "DropletUtils", "scater", "scran")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for(pack1 in bio_packs){
if( !pack1 %in% installed.packages()[,"Package"]){
BiocManager::install(pack1)
}
}
cran_packs = c("data.table", "immunarch", "ggplot2", "ggpubr", "ggpointdensity")
for(pack1 in cran_packs){
if( !pack1 %in% installed.packages()[,"Package"]){
install.packages(pack1)
}
}
library(SingleCellExperiment)
library(DropletUtils)
library(scater)
library(scran)
library(data.table)
library(ggplot2)
library(ggpointdensity)
library(ggpubr)
library(immunarch)
theme_set(theme_bw())
nchar("a:b")
nchar("a;b")
DT_1 = data.table(
aa = c("ABC","BC","B","BC","CA","ABC"))
DT_1 = data.table(
+     aa = c("BC","ABC","BC","BC","BC","ABC"))
DT_2 = data.table(aa = c("BC","ABC","BC","BC","BC","ABC"))
DT_3 = data.table(aa = c("B","BC","ABC","AB","ABC","BC"))
DT_list = list()
DT_list[[1]] = DT_1
DT_list[[2]] = DT_2
DT_list[[3]] = DT_3
DT_list
df <- df %>% lazy_dt()
df = DT_list
DT_list[[1]] %>% lazy_dt()
seq_col = "aa"
df = DT_list[[1]] %>% lazy_dt()
df
df %>%
select(seq_col) %>%
collect(n = Inf) %>%
sapply(nchar) %>%
table()
df
df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table()
df
names(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table())
as.numeric(names(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table()))
as.vector(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table())
data.frame(Sample = "test", Length = as.numeric(names(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table())), )
data.frame(Sample = "test", Length = as.numeric(names(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table())), Count = as.vector(df %>% select(all_of(seq_col)) %>% collect(n = Inf) %>% sapply(nchar) %>% table()))
library(dplyr)
dplyr::intersect(c(1,2,2,3,5), c(3,1, 2, 2, 6))
test_1 = data.table(aa = c("BC","ABC","BC","BC","BC","ABC"), n=c(2, 3, 2, 2, 2, 3))
test_1
test_1 %>% lazy_dt() %>% select(aa) %>% collect(n=Inf)
test_1 %>% lazy_dt() %>% select(c(aa, n)) %>% collect(n=Inf)
get
.gene = "hs.trbv"
which_gene <- strsplit(.gene, ".", TRUE)[[1]][2]
which_gene
gene_col <- tolower(substr(which_gene, 4, 4))
gene_col
